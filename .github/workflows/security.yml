name: Security and Compliance

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [contracts, borneo-trace-app, backend-api, mobile-app]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.project }}/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./${{ matrix.project }}
    
    - name: Run npm audit
      run: npm audit --audit-level moderate --json > audit-results.json
      working-directory: ./${{ matrix.project }}
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json
        path: ./${{ matrix.project }}
      continue-on-error: true
    
    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-report-${{ matrix.project }}
        path: |
          ${{ matrix.project }}/audit-results.json
          ${{ matrix.project }}/snyk-results.json
        retention-days: 30

  # Smart contract security audit
  smart-contract-security:
    name: Smart Contract Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./contracts
    
    - name: Run Slither analysis
      uses: crytic/slither-action@v0.11.0
      with:
        target: ./contracts/contracts
        slither-args: --config-file .slither.config.json --json slither-results.json
      continue-on-error: true
    
    - name: Run MythX analysis
      uses: ConsenSys/mythx-cli-action@v1.0.0
      with:
        api_key: ${{ secrets.MYTHX_API_KEY }}
        mode: deep
        target: ./contracts/contracts
        output: mythx-results.json
      continue-on-error: true
    
    - name: Run Echidna fuzzing
      run: |
        docker run --rm -v $(pwd):/code trailofbits/echidna echidna-test /code/contracts/contracts/CertificateNFT.sol
      continue-on-error: true
    
    - name: Upload security audit reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smart-contract-security-reports
        path: |
          ./contracts/slither-results.json
          ./contracts/mythx-results.json
        retention-days: 90

  # Code quality and security analysis
  code-quality:
    name: Code Quality and Security Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [borneo-trace-app, backend-api, mobile-app]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.project }}/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./${{ matrix.project }}
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run SonarCloud analysis
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ${{ matrix.project }}
      continue-on-error: true
    
    - name: Run ESLint security rules
      run: npm run lint:security
      working-directory: ./${{ matrix.project }}
      continue-on-error: true

  # Infrastructure security scan
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Scan Docker images
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --format json --output trivy-docker.json \
          node:18-alpine
      continue-on-error: true
    
    - name: Upload Docker scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-scan
        path: trivy-docker.json
        retention-days: 30

  # Compliance check
  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install compliance tools
      run: |
        npm install -g license-checker
        npm install -g audit-ci
    
    - name: Check license compliance
      run: |
        for project in contracts borneo-trace-app backend-api mobile-app; do
          echo "Checking licenses for $project"
          cd $project && license-checker --summary
          cd ..
        done
      continue-on-error: true
    
    - name: Check for hardcoded secrets
      run: |
        grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" . | \
        grep -v node_modules | \
        grep -v ".git" | \
        grep -v "package-lock.json" | \
        grep -v "yarn.lock" || echo "No hardcoded secrets found"
      continue-on-error: true
    
    - name: Check for security headers
      run: |
        echo "Checking for security headers in frontend build"
        # This would check the built frontend for security headers
        # Implementation depends on the specific build process
      continue-on-error: true

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, smart-contract-security, code-quality, infrastructure-security, compliance]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all security artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./security-reports
    
    - name: Generate comprehensive security report
      run: |
        echo "# Security Report - $(date)" > security-report.md
        echo "" >> security-report.md
        echo "## Summary" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Smart Contract Security: ${{ needs.smart-contract-security.result }}" >> security-report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> security-report.md
        echo "- Infrastructure Security: ${{ needs.infrastructure-security.result }}" >> security-report.md
        echo "- Compliance: ${{ needs.compliance.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Detailed Reports" >> security-report.md
        echo "Check the artifacts for detailed security analysis reports." >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90
    
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#borneotrace-security'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "Security scan completed for BorneoTrace",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [
                {"title": "Dependency Scan", "value": "${{ needs.dependency-scan.result }}", "short": true},
                {"title": "Smart Contract Security", "value": "${{ needs.smart-contract-security.result }}", "short": true},
                {"title": "Code Quality", "value": "${{ needs.code-quality.result }}", "short": true},
                {"title": "Infrastructure Security", "value": "${{ needs.infrastructure-security.result }}", "short": true},
                {"title": "Compliance", "value": "${{ needs.compliance.result }}", "short": true}
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
