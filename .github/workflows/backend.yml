name: Backend API CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend-api/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'backend-api/**'
      - '.github/workflows/backend.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Test and build backend
  test-and-build:
    name: Test and Build Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend-api
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true
        NODE_ENV: test
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-api/coverage/lcov.info
        flags: backend
        name: backend-coverage
    
    - name: Build TypeScript
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: ./backend-api/dist/
        retention-days: 30

  # Deploy to staging (AWS ECS)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: borneotrace-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend-api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: borneotrace-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecs update-service \
          --cluster borneotrace-staging \
          --service borneotrace-backend-staging \
          --force-new-deployment \
          --task-definition borneotrace-backend-staging

  # Deploy to production (AWS ECS)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: borneotrace-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend-api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    - name: Deploy to ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: borneotrace-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecs update-service \
          --cluster borneotrace-production \
          --service borneotrace-backend-production \
          --force-new-deployment \
          --task-definition borneotrace-backend-production

  # Run integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    defaults:
      run:
        working-directory: ./backend-api
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        API_URL: ${{ needs.deploy-staging.result == 'success' && 'https://api-staging.borneotrace.com' || 'https://api.borneotrace.com' }}
        NODE_ENV: test

  # Security audit
  security:
    name: Backend Security Audit
    runs-on: ubuntu-latest
    needs: test-and-build
    defaults:
      run:
        working-directory: ./backend-api
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Load testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run load tests
      run: |
        artillery run ./backend-api/tests/load/load-test.yml
      env:
        API_URL: ${{ needs.deploy-staging.result == 'success' && 'https://api-staging.borneotrace.com' || 'https://api.borneotrace.com' }}
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: ./backend-api/tests/load/results/
        retention-days: 7

  # Database migration
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    environment: ${{ needs.deploy-production.result == 'success' && 'production' || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend-api/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run database migrations
      run: npm run migrate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NODE_ENV: ${{ needs.deploy-production.result == 'success' && 'production' || 'staging' }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, integration-tests, security, load-testing, migrate]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#borneotrace-deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
    
    - name: Create deployment summary
      run: |
        echo "## Backend API Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Staging Deployment**: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Production Deployment**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Audit**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Testing**: ${{ needs.load-testing.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database Migration**: ${{ needs.migrate.result }}" >> $GITHUB_STEP_SUMMARY
