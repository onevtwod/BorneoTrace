name: Monitoring and Health Checks

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes
  workflow_dispatch:
  repository_dispatch:
    types: [health-check, performance-alert]

env:
  NODE_VERSION: '18'

jobs:
  # Health check for deployed services
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
        service: [frontend, backend, contracts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm install -g axios
    
    - name: Health check frontend
      if: matrix.service == 'frontend'
      run: |
        node -e "
        const axios = require('axios');
        const url = '${{ matrix.environment == 'staging' && 'https://borneotrace-staging.vercel.app' || 'https://borneotrace.vercel.app' }}/health';
        axios.get(url, { timeout: 10000 })
          .then(response => {
            console.log('Frontend health check passed:', response.status);
            process.exit(0);
          })
          .catch(error => {
            console.error('Frontend health check failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true
    
    - name: Health check backend
      if: matrix.service == 'backend'
      run: |
        node -e "
        const axios = require('axios');
        const url = '${{ matrix.environment == 'staging' && 'https://api-staging.borneotrace.com' || 'https://api.borneotrace.com' }}/health';
        axios.get(url, { timeout: 10000 })
          .then(response => {
            console.log('Backend health check passed:', response.status);
            process.exit(0);
          })
          .catch(error => {
            console.error('Backend health check failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true
    
    - name: Health check contracts
      if: matrix.service == 'contracts'
      run: |
        node -e "
        const axios = require('axios');
        const rpcUrl = '${{ matrix.environment == 'staging' && 'https://rpc-mumbai.maticvigil.com' || 'https://polygon-rpc.com' }}';
        axios.post(rpcUrl, {
          jsonrpc: '2.0',
          method: 'eth_blockNumber',
          params: [],
          id: 1
        }, { timeout: 10000 })
          .then(response => {
            if (response.data.result) {
              console.log('Contract network health check passed');
              process.exit(0);
            } else {
              console.error('Contract network health check failed');
              process.exit(1);
            }
          })
          .catch(error => {
            console.error('Contract network health check failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true
    
    - name: Alert on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#borneotrace-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "ðŸš¨ Health Check Failed",
            "attachments": [{
              "color": "danger",
              "fields": [
                {"title": "Environment", "value": "${{ matrix.environment }}", "short": true},
                {"title": "Service", "value": "${{ matrix.service }}", "short": true},
                {"title": "Time", "value": "${{ github.run_id }}", "short": true}
              ]
            }]
          }

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_TARGET_URL: ${{ matrix.environment == 'staging' && 'https://borneotrace-staging.vercel.app' || 'https://borneotrace.vercel.app' }}
        LHCI_SERVER_URL: ${{ secrets.LHCI_SERVER_URL }}
        LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
      continue-on-error: true
    
    - name: Check performance budgets
      run: |
        node -e "
        const axios = require('axios');
        const url = '${{ matrix.environment == 'staging' && 'https://borneotrace-staging.vercel.app' || 'https://borneotrace.vercel.app' }}';
        const start = Date.now();
        axios.get(url, { timeout: 30000 })
          .then(response => {
            const loadTime = Date.now() - start;
            console.log('Page load time:', loadTime + 'ms');
            if (loadTime > 3000) {
              console.error('Performance budget exceeded: ' + loadTime + 'ms > 3000ms');
              process.exit(1);
            } else {
              console.log('Performance budget met');
              process.exit(0);
            }
          })
          .catch(error => {
            console.error('Performance check failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true

  # Database monitoring
  database-monitoring:
    name: Database Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm install -g pg
    
    - name: Check database connectivity
      run: |
        node -e "
        const { Client } = require('pg');
        const client = new Client({
          connectionString: process.env.DATABASE_URL
        });
        client.connect()
          .then(() => {
            console.log('Database connection successful');
            return client.query('SELECT NOW()');
          })
          .then(result => {
            console.log('Database query successful:', result.rows[0]);
            client.end();
            process.exit(0);
          })
          .catch(error => {
            console.error('Database check failed:', error.message);
            client.end();
            process.exit(1);
          });
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      continue-on-error: true
    
    - name: Check database performance
      run: |
        node -e "
        const { Client } = require('pg');
        const client = new Client({
          connectionString: process.env.DATABASE_URL
        });
        client.connect()
          .then(() => {
            const start = Date.now();
            return client.query('SELECT COUNT(*) FROM certificates');
          })
          .then(result => {
            const queryTime = Date.now() - start;
            console.log('Query execution time:', queryTime + 'ms');
            if (queryTime > 1000) {
              console.error('Database performance issue: ' + queryTime + 'ms > 1000ms');
              client.end();
              process.exit(1);
            } else {
              console.log('Database performance OK');
              client.end();
              process.exit(0);
            }
          })
          .catch(error => {
            console.error('Database performance check failed:', error.message);
            client.end();
            process.exit(1);
          });
        "
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      continue-on-error: true

  # Blockchain monitoring
  blockchain-monitoring:
    name: Blockchain Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm install -g ethers
    
    - name: Check Polygon network status
      run: |
        node -e "
        const { ethers } = require('ethers');
        const provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com');
        provider.getBlockNumber()
          .then(blockNumber => {
            console.log('Current block number:', blockNumber);
            return provider.getBlock(blockNumber);
          })
          .then(block => {
            const blockTime = Date.now() - (block.timestamp * 1000);
            console.log('Block age:', blockTime + 'ms');
            if (blockTime > 30000) {
              console.error('Blockchain sync issue: block age ' + blockTime + 'ms > 30000ms');
              process.exit(1);
            } else {
              console.log('Blockchain sync OK');
              process.exit(0);
            }
          })
          .catch(error => {
            console.error('Blockchain monitoring failed:', error.message);
            process.exit(1);
          });
        "
      continue-on-error: true
    
    - name: Check contract deployment status
      run: |
        node -e "
        const { ethers } = require('ethers');
        const provider = new ethers.providers.JsonRpcProvider('https://polygon-rpc.com');
        const contractAddress = '${{ secrets.REGISTRY_CONTRACT_ADDRESS }}';
        if (contractAddress && contractAddress !== '0x0000000000000000000000000000000000000000') {
          provider.getCode(contractAddress)
            .then(code => {
              if (code === '0x') {
                console.error('Contract not deployed at address:', contractAddress);
                process.exit(1);
              } else {
                console.log('Contract deployed successfully at:', contractAddress);
                process.exit(0);
              }
            })
            .catch(error => {
              console.error('Contract check failed:', error.message);
              process.exit(1);
            });
        } else {
          console.log('No contract address configured, skipping check');
          process.exit(0);
        }
        "
      continue-on-error: true

  # Uptime monitoring
  uptime-monitoring:
    name: Uptime Monitoring
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [staging, production]
        endpoint: [frontend, backend, api]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm install -g axios
    
    - name: Uptime check
      run: |
        node -e "
        const axios = require('axios');
        const endpoints = {
          frontend: '${{ matrix.environment == 'staging' && 'https://borneotrace-staging.vercel.app' || 'https://borneotrace.vercel.app' }}',
          backend: '${{ matrix.environment == 'staging' && 'https://api-staging.borneotrace.com' || 'https://api.borneotrace.com' }}',
          api: '${{ matrix.environment == 'staging' && 'https://api-staging.borneotrace.com/health' || 'https://api.borneotrace.com/health' }}'
        };
        const url = endpoints['${{ matrix.endpoint }}'];
        if (url) {
          axios.get(url, { timeout: 10000 })
            .then(response => {
              console.log('Uptime check passed for ${{ matrix.endpoint }}:', response.status);
              process.exit(0);
            })
            .catch(error => {
              console.error('Uptime check failed for ${{ matrix.endpoint }}:', error.message);
              process.exit(1);
            });
        } else {
          console.log('No URL configured for ${{ matrix.endpoint }}');
          process.exit(0);
        }
        "
      continue-on-error: true

  # Generate monitoring report
  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, database-monitoring, blockchain-monitoring, uptime-monitoring]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate monitoring report
      run: |
        echo "# Monitoring Report - $(date)" > monitoring-report.md
        echo "" >> monitoring-report.md
        echo "## Summary" >> monitoring-report.md
        echo "- Health Checks: ${{ needs.health-check.result }}" >> monitoring-report.md
        echo "- Performance Monitoring: ${{ needs.performance-monitoring.result }}" >> monitoring-report.md
        echo "- Database Monitoring: ${{ needs.database-monitoring.result }}" >> monitoring-report.md
        echo "- Blockchain Monitoring: ${{ needs.blockchain-monitoring.result }}" >> monitoring-report.md
        echo "- Uptime Monitoring: ${{ needs.uptime-monitoring.result }}" >> monitoring-report.md
        echo "" >> monitoring-report.md
        echo "## System Status" >> monitoring-report.md
        echo "All systems operational." >> monitoring-report.md
    
    - name: Upload monitoring report
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-report
        path: monitoring-report.md
        retention-days: 7
    
    - name: Notify monitoring team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#borneotrace-monitoring'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "ðŸ“Š Monitoring Report Generated",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'warning' }}",
              "fields": [
                {"title": "Health Checks", "value": "${{ needs.health-check.result }}", "short": true},
                {"title": "Performance", "value": "${{ needs.performance-monitoring.result }}", "short": true},
                {"title": "Database", "value": "${{ needs.database-monitoring.result }}", "short": true},
                {"title": "Blockchain", "value": "${{ needs.blockchain-monitoring.result }}", "short": true},
                {"title": "Uptime", "value": "${{ needs.uptime-monitoring.result }}", "short": true}
              ]
            }]
          }
      if: always()
