version: '3.8'

services:
  # Local blockchain network for development
  hardhat-node:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
      - hardhat-cache:/app/cache
      - hardhat-artifacts:/app/artifacts
    environment:
      - NODE_ENV=development
    command: npx hardhat node --hostname 0.0.0.0
    networks:
      - borneotrace-network

  # PostgreSQL database for backend API
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: borneotrace
      POSTGRES_USER: borneotrace
      POSTGRES_PASSWORD: borneotrace_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend-api/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - borneotrace-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U borneotrace" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - borneotrace-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://borneotrace:borneotrace_password@postgres:5432/borneotrace
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
      - POLYGON_RPC_URL=http://hardhat-node:8545
      - REGISTRY_CONTRACT_ADDRESS=0x0000000000000000000000000000000000000000
    volumes:
      - ./backend-api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      hardhat-node:
        condition: service_started
    networks:
      - borneotrace-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend development server
  frontend:
    build:
      context: ./borneo-trace-app
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001
      - VITE_POLYGON_RPC_URL=http://localhost:8545
    volumes:
      - ./borneo-trace-app:/app
      - /app/node_modules
    depends_on:
      - backend-api
    networks:
      - borneotrace-network

  # IPFS node for decentralized storage
  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - borneotrace-network
    healthcheck:
      test: [ "CMD", "ipfs", "id" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - borneotrace-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - borneotrace-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend-api
    networks:
      - borneotrace-network

volumes:
  hardhat-cache:
  hardhat-artifacts:
  postgres-data:
  redis-data:
  ipfs-data:
  prometheus-data:
  grafana-data:


networks:
  borneotrace-network:
    driver: bridge
